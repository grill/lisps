{[[(f) {[[(g) {[[(f) {[[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {aload pop set_par} forall {{(x) (g) {call_fun} exec} (f) {call_fun} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {0 get pop_par pop_var} forall}]] {aload pop set_par} forall {{(x) (g) {call_fun} exec} (f) {call_fun} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {[[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {aload pop set_par} forall {{(x) (g) {call_fun} exec} (f) {call_fun} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {0 get pop_par pop_var} forall}]] {0 get pop_par pop_var} forall}]] {aload pop set_par} forall {{(x) (g) {call_fun} exec} (f) {call_fun} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(g) {[[(f) {[[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {aload pop set_par} forall {{(x) (g) {call_fun} exec} (f) {call_fun} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {0 get pop_par pop_var} forall}]] {aload pop set_par} forall {{(x) (g) {call_fun} exec} (f) {call_fun} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {[[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx { exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {aload pop set_par} forall {{(x) (g) {call_fun} exec} (f) {call_fun} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[ (f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 { set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {0 get pop_par pop_var} forall}]] {0 get pop_par pop_var} forall}]] {0 get pop_par pop_var} forall}]] {aload pop set_par} forall {{(x) (g) {call_fun} exec} (f) {call_fun} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} 
ifelse [[(f) {[[(g) {[[(f) {[[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} 
exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch 
lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {aload pop set_par} forall {{(x) (g) {call_fun} exec} (f) {call_fun} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda 
append_par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} 
exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {0 get pop_par pop_var} forall}]] {aload pop set_par} forall {{(x) (g) {call_fun} exec} (f) {call_fun} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {[[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {
myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal 
clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {aload pop set_par} forall {{(x) (g) {call_fun} exec} (f) {call_fun} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch 
lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} 
exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {0 get pop_par pop_var} forall}]] {0 get pop_par pop_var} forall}]] {aload pop set_par} forall {{(x) (g) {call_fun} exec} (f) {call_fun} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} 
ifelse [[(g) {[[(f) {[[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)]
 isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda 
append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {aload pop set_par} forall {{(x) (g) {call_fun} exec} (f) {call_fun} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_
par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)
] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {0 get pop_par pop_var} forall}]] {aload pop set_par} forall {{(x) (g) {call_fun} exec} (f) {call_fun} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {[[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} 
exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} 
putinterval cvx {exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {aload pop set_par} forall {{(x) (g) {call_fun} exec} (f) {call_fun} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {[[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_
par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] 
isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}] [(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}] [(g) {[[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {aload pop set_par} forall {(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse [[(f) {{(2) (x) {myop mul} exec} [(x)] isCall 3 array dup 0 {set_pars getVal clearpars} putinterval cvx {exch lambda append_par_arr} ifelse}]] {0 get pop_par pop_var} forall}]] {0 get pop_par pop_var} forall}]] {0 get pop_par pop_var} forall}]] {0 get pop_par pop_var} forall}]] {0 get pop_par pop_var} forall}