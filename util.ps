% generates an array from num to zero
/array_to { % num - num num-1 num-2 ... 0
  dup 0 ge
  { mark exch dup { dup 1 sub } repeat ] }
  { [] }
  ifelse
} def

/printdict {
 mark exch { } forall pstack ] pop
} def

/isMark {
  dup mark eq
} def

/genStr {
  counttomark dup string exch { dup 3 -1 roll exch counttomark 3 sub 3 -1 roll put } repeat exch pop
} def

/isOpenPT % string - string bool
{
  
   isEmpty not % isNotEmpty
   { % == (
      dup 0 0 3 1 roll exch isOpenPTWithoutWhiteSpace
   }
   { false }
   ifelse
} def


/isOPT {
   dup 40 eq
} def

/isCPT {
   dup 41 eq
} def

/isWhiteChar {
   dup dup 32 eq exch 9 eq or
} def

/isOpenPTWithoutWhiteSpace % string (base string) integer (base counter) string (copy of base string for get) integer (counter for get) - string bool
{
   isEmpty % if string is already empty
   { false }
   {
      exch get dup dup
      32 eq exch 9 eq % true if tab or blank current character in string on stack
      or {
         pop 
         exch dup 3 1 roll exch % setup for call of isOpenPTWithoutWhiteSpace
         1 add dup 3 1 roll exch
         isOpenPTWithoutWhiteSpace
      }
      { 40 eq exch pop } % true if char = '('
      ifelse
   }
   ifelse
} def

/getTokenName % token - string
{
   dup length string cvs
} def

/readLineStdin % - string
{
   (%stdin) (r) file =string readline
} def

/isEmpty % string - string bool
{
   dup length 0 eq
} def

/gotoline % file line# - file
{
  {
    dup =string readline pop pop
  } repeat
} def

/test % test# - bool
{
   (Lisp Interpreter Tester by Alex and Gabriel\n)
   print
   dup =string cvs print (.Test\n) print flush
   1 sub
   {
      dup (test/tests) (r) file exch readLineAtNumber  % - string bool
      not
      { pop exit }
      if
      % line# string
      parse
      % line# erg
      dup type 1 type eq
      % line# erg bool
      (test/ergebnisse) (r) file 4 -1 roll readLineAtNumber  % - string bool
      not
      { pop exit }
      if
      % erg bool erg2
      exch { cvi } if
      pstack % print stack
      eq
      % bool
      (----------\n) print pstack
      clear % clear stack
   } exec %loop
} def

/readLineAtNumber % file line# - string bool
{
  gotoline =string readline
} def
